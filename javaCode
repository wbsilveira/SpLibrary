package splibrary.report;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;

import net.sf.jasperreports.functions.annotations.Function;
import net.sf.jasperreports.functions.annotations.FunctionMessagesBundle;
import net.sf.jasperreports.functions.annotations.FunctionParameter;
import net.sf.jasperreports.functions.annotations.FunctionParameters;



@FunctionMessagesBundle ( "splibrary.report.SpLibrary")
public class SpLibrary{

	
	@Function("FirstToUpper")
	@FunctionParameters({
		@FunctionParameter("frase")
	})

 	public static String FirstToUpper(String frase) {
 		//Formata da seguinte maneira '11.222-333'
		frase = frase.trim();
		if (frase.equals(""))
 		 	return frase;
 		String aux = "";
 		String[] parts = frase.split("\\s+");
 		for (String string : parts) {
 			aux+=" "+string.substring(0, 1).toUpperCase()+string.substring(1, string.length());
		}return aux.trim();
		
 	}
	
 	@Function("FormataCEP")
	@FunctionParameters({
		@FunctionParameter("cep")
	})
 	
 	
 	public static String FormataCEP(String cep) {
 		//Formata da seguinte maneira '11.222-333'
 		if (cep.length() < 8 || cep.length() == 0 || cep.equals(""))
 		 	return cep;
 		else if(cep.length()==8){
 			cep = cep.substring(0,2)+ "."+cep.substring(2,5)+ "-"+ cep.substring(5,8);		
 		}
 		return cep;
 		
 	}
 	
 	@Function("FormataBDSCALE")
	@FunctionParameters({
		@FunctionParameter("number"),
		@FunctionParameter("qtdCasaDecimal")
	})
	public static String FormataBDSCALE(String number, int qtdCasaDecimal) {
	
	     String res = new BigDecimal(number).setScale(qtdCasaDecimal,RoundingMode.HALF_DOWN).toPlainString();
	     return res;
	    
	}

 	@Function("FormataDATAExtenso")
	@FunctionParameters({
		@FunctionParameter("Data"),
	})
 	public static String FormataDATAExtenso(Date Data) {

 		// CRIO AQUI UM FORMATADOR
 		// PASSANDO UM ESTILO DE FORMATAÇÃO : DateFormat.FULL
 		// E PASSANDO UM LOCAL DA DATA : new Locale("pt", "BR")
 		DateFormat formatador = DateFormat.getDateInstance(DateFormat.FULL, new Locale("pt", "BR"));
 		// FORMATO A DATA, O FORMATADOR ME RETORNA 
 		// A STRING DA DATA FORMATADA 
 		String dataExtenso = formatador.format(Data);
 		return dataExtenso;
 		
 	}

 	@Function("FormataValorPorExtenso")
	@FunctionParameters({
		@FunctionParameter("vlr"),
	})
 	public static String FormataValorPorExtenso(double vlr) {
 		if (vlr == 0)
 			return("zero");

 		long inteiro = (long)Math.abs(vlr); // parte inteira do valor
 		double resto = vlr - inteiro;       // parte fracionária do valor

 		String vlrS = String.valueOf(inteiro);
 		if (vlrS.length() > 15)
 			return("Erro: valor superior a 999 trilhões.");

 	    String s = "", saux, vlrP;
 	    String centavos = String.valueOf((int)Math.round(resto * 100));

 	    String[] unidade = {"", "um", "dois", "três", "quatro", "cinco",
 	             "seis", "sete", "oito", "nove", "dez", "onze",
 	             "doze", "treze", "quatorze", "quinze", "dezesseis",
 	             "dezessete", "dezoito", "dezenove"};
 	    String[] centena = {"", "cento", "duzentos", "trezentos",
 	             "quatrocentos", "quinhentos", "seiscentos",
 	             "setecentos", "oitocentos", "novecentos"};
 	    String[] dezena = {"", "", "vinte", "trinta", "quarenta", "cinquenta",
 	             "sessenta", "setenta", "oitenta", "noventa"};
 	    String[] qualificaS = {"", "mil", "milhão", "bilhão", "trilhão"};
 	    String[] qualificaP = {"", "mil", "milhões", "bilhões", "trilhões"};

 	// definindo o extenso da parte inteira do valor
 	    int n, unid, dez, cent, tam, i = 0;
 	    boolean umReal = false, tem = false;
 	    while (!vlrS.equals("0")) {
 	      tam = vlrS.length();
 	// retira do valor a 1a. parte, 2a. parte, por exemplo, para 123456789:
 	// 1a. parte = 789 (centena)
 	// 2a. parte = 456 (mil)
 	// 3a. parte = 123 (milhões)
 	      if (tam > 3) {
 	         vlrP = vlrS.substring(tam-3, tam);
 	         vlrS = vlrS.substring(0, tam-3);
 	      }
 	      else { // última parte do valor
 	        vlrP = vlrS;
 	        vlrS = "0";
 	      }
 	      if (!vlrP.equals("000")) {
 	         saux = "";
 	         if (vlrP.equals("100"))
 	            saux = "cem";
 	         else if (vlrP.equals("200"))
  	            saux = "duzentos";
 	         else if (vlrP.equals("300"))
  	            saux = "trezentos";
 	         else if (vlrP.equals("400"))
  	            saux = "quatrocentos";
 	         else if (vlrP.equals("500"))
  	            saux = "quinhentos";
 	         else if (vlrP.equals("600"))
   	            saux = "seiscentos";
 	         else if (vlrP.equals("700"))
   	            saux = "setecentos";
 	         else if (vlrP.equals("800"))
    	        saux = "oitocentos";
 	         else if (vlrP.equals("900"))
    	        saux = "novecentos";
 	         else {
 	           n = Integer.parseInt(vlrP, 10);  // para n = 371, tem-se:
 	           cent = n / 100;                  // cent = 3 (centena trezentos)
 	           dez = (n % 100) / 10;            // dez  = 7 (dezena setenta)
 	           unid = (n % 100) % 10;           // unid = 1 (unidade um)
 	           if (cent != 0)
 	              saux = centena[cent];
 	           if ((n % 100) <= 19) {
 	              if (saux.length() != 0)
 	                 saux = saux + " e " + unidade[n % 100];
 	              else saux = unidade[n % 100];
 	           }
 	           else {
 	              if (saux.length() != 0)
 	                 saux = saux + " e " + dezena[dez];
 	              else saux = dezena[dez];
 	              if (unid != 0) {
 	                 if (saux.length() != 0)
 	                    saux = saux + " e " + unidade[unid];
 	                 else saux = unidade[unid];
 	              }
 	           }
 	         }
 	         if (vlrP.equals("1") || vlrP.equals("001")) {
 	            if (i == 0) // 1a. parte do valor (um real)
 	               umReal = true;
 	            else saux = saux + " " + qualificaS[i];
 	         }
 	         else if (i != 0)
 	                 saux = saux + " " + qualificaP[i];
 	         if (s.length() != 0)
 	            s = saux + ", " + s;
 	         else s = saux;
 	      }
 	      if (((i == 0) || (i == 1)) && s.length() != 0)
 	         tem = true; // tem centena ou mil no valor
 	      i = i + 1; // próximo qualificador: 1- mil, 2- milhão, 3- bilhão, ...
 	    }

 	    if (s.length() != 0) {
 	       if (umReal)
 	          s = s + " real";
 	       else if (tem)
 	               s = s + " reais";
 	            else s = s + " de reais";
 	    }

 	// definindo o extenso dos centavos do valor
 	    if (!centavos.equals("0")) { // valor com centavos
 	       if (s.length() != 0) // se não é valor somente com centavos
 	          s = s + " e ";
 	       if (centavos.equals("1"))
 	          s = s + "um centavo";
 	       else {
 	         n = Integer.parseInt(centavos, 10);
 	         if (n <= 19)
 	            s = s + unidade[n];
 	         else {             // para n = 37, tem-se:
 	           unid = n % 10;   // unid = 37 % 10 = 7 (unidade sete)
 	           dez = n / 10;    // dez  = 37 / 10 = 3 (dezena trinta)
 	           s = s + dezena[dez];
 	           if (unid != 0)
 	              s = s + " e " + unidade[unid];
 	         }
 	         s = s + " centavos";
 	       }
 	    }
 	    return(s);
 	}

 	
	@Function("FormataFLUpper")
	@FunctionParameters({
		@FunctionParameter("Texto")
	}) 	
 	public static String FormataFLUpper(String Texto) { 	
 		String Retorno = Texto.substring(0, 1).toUpperCase()+Texto.substring(1, Texto.length()).toLowerCase();
 	
 		return Retorno;
 	}
	@Function("FormataVALOR")
	@FunctionParameters({
		@FunctionParameter("Currency"),
		@FunctionParameter("DecimalSeparator"),
		@FunctionParameter("GroupSeparator"),
		@FunctionParameter("Valor"),
		@FunctionParameter("qtdCasaDecimal"),
		@FunctionParameter("usaCurrency"),//default false
		@FunctionParameter("usaGroupSeparator")//default true
	})
 	public static String FormataVALOR(String Currency,String DecimalSeparator, String GroupSeparator, 
 	Double Valor,int qtdCasaDecimal, Boolean usaCurrency, Boolean usaGroupSeparator) {

 		String Valor_db = FormataBDSCALE(Valor.toString(),qtdCasaDecimal);
	    
 		String[] parts = Valor_db.split("\\."); //separa a string pelos pontos

 		StringBuilder retorno = new StringBuilder();

 		String Currency_format= "";

 		if(usaCurrency == true){
 			Currency_format= Currency+" ";
 		}

 		if(parts[0].length() <= 3 || usaGroupSeparator==false){ 			
 			return Currency_format+parts[0]+DecimalSeparator+parts[1]; //se tiver menos q 3 caracteres, só substitui o ponto
 		} 		

 		retorno.append(String.valueOf(parts[0]));
 		retorno.reverse(); //inverte a String para colocar o Group Separator
 		parts[0] = String.valueOf(retorno);
 		
 		retorno.setLength(0);//limpa o retorno
 		
 		Integer soma=0;
 		if((parts[0].length()%3)==0){
 			soma = (parts[0].length()/3)-1;//isso pra ver quantos pontos tem q ter
 		}
 		else{ 			
 			soma = (parts[0].length()/3);
 		}
 		
 		Integer cont=0;		
 		
 		for(int i=0;i<=(parts[0].length()-1);i=i+3){
 			if(cont!=soma){
 				retorno.append(parts[0].substring(i,i+3));
 				retorno.append(GroupSeparator);
 			}
 			cont=cont+1;
 		}
 		
 		String subs= String.valueOf(retorno).replace(GroupSeparator,"");
 		subs = parts[0].replace(subs,"");
 		retorno.append(subs);
 		
 		return String.valueOf(Currency_format+ retorno.reverse()+DecimalSeparator+parts[1]);

 	}
	
	@Function("FormataVALOR")
	@FunctionParameters({
		@FunctionParameter("Currency"),
		@FunctionParameter("DecimalSeparator"),
		@FunctionParameter("GroupSeparator"),
		@FunctionParameter("Valor"),
		@FunctionParameter("qtdCasaDecimal")
	})
	public static String FormataVALOR(String Currency,String DecimalSeparator, String GroupSeparator,Double Valor,int QtdCasaDecimal) {
		return FormataVALOR(Currency,DecimalSeparator,GroupSeparator,Valor,QtdCasaDecimal,false,true);
	}
	
 	@Function("GetDateUTC")
	@FunctionParameters({
		@FunctionParameter("data")
	})	
 	public static Date GetDateUTC(Date data) throws ParseException {
 		

        if (data == null){
            return null;
        }
 		 		
 		SimpleDateFormat dateFormatGmt = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
 		dateFormatGmt.setTimeZone(TimeZone.getTimeZone("GMT"));
 		
 		SimpleDateFormat dateFormatLocal = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
 		 
 		return dateFormatLocal.parse( dateFormatGmt.format(data) );		
	}
 	

 	@Function("FormataTELEFONE")
	@FunctionParameters({
		@FunctionParameter("telefone")
	})
 	public static String FormataTELEFONE(String telefone) {
 		String telefone_format;
			//Valida se o Length da variavel é = 10
 		
 		
 		if(telefone.isEmpty() || telefone.length()<10 || telefone.equals("")){
 			return telefone;
 		}else{
 			if(telefone.length() == 10) {
			
 				//Possuindo retorno True ele formata o dessa maneira '(11) 2222-3333'
 				telefone_format = "(" + telefone.substring(0,2) + ") " + telefone.substring(2,6) + "-" + telefone.substring(6,10);
 			}
 			else if(telefone.substring(0,1) != "0" && telefone.length() == 11) { //Se retorno é False, ele Valida se o Primeiro numero da String é diferente de 0
 				//Sendo o retorno True, ele formata String dessa maneira '(11) 2222-33334'
 				telefone_format = "(" + telefone.substring(0,2) + ") "+ telefone.substring(2,6) + "-"+ telefone.substring(6,11);
 			}
 			else if (telefone.substring(0,1) == "0" && telefone.length() == 11){	//Sendo o Retorno False, ele começa a Formatação apartir da 2º possição da String e realizando a formatação dessa maneira '(11) 2222-3333'
 				telefone_format = "(" + telefone.substring(1,2) + ") " + telefone.substring(2,6) + "-" + telefone.substring(6,11);
 			}
 			else {
 				return telefone;
 			}
 		}
		return telefone_format;
 	}
 	@Function("FormataCPF")
	@FunctionParameters({
		@FunctionParameter("cpf")
	})
 	public static String FormataCPF(String cpf) {

 		if(cpf.length() == 10){ //modificado para não disparar ArrayIndexOutOfBoundsException
			cpf = "0"+cpf;
 		}	
 		
 		if(cpf.length() == 11){ 
			cpf = cpf.substring(0, 3) + "." + cpf.substring(3, 6) + "." 
			+ cpf.substring(6, 9) + "-" + cpf.substring(9, 11);
 		}			
 		return cpf;
 	}
	
 	@Function("FormataCNPJ")
	@FunctionParameters({
		@FunctionParameter("cnpj")
	})
 	public static String FormataCNPJ(String cnpj) {

		if(cnpj.length()==13){		
			cnpj="0"+cnpj;
		} 		
		if(cnpj.length()==14){	
			cnpj = cnpj.substring(0, 2) + "." + cnpj.substring(2, 5) + "." 
			+ cnpj.substring(5, 8) + "/" + cnpj.substring(8, 12) + "-" + cnpj.substring(12, 14); 		
		}
		
 		return cnpj;
 	}
	
	@Function("FormataCPFCNPJ")
	@FunctionParameters({
		@FunctionParameter("cpfcnpj")
	})
	public static String FormataCPFCNPJ(String cpfcnpj) {

		if(cpfcnpj.length()==13 || cpfcnpj.length()==10){
			cpfcnpj="0"+cpfcnpj;
		}
				
		if(cpfcnpj.length()==14){
	 		cpfcnpj = cpfcnpj.substring(0, 2) + "." + cpfcnpj.substring(2, 5) + "." 
	 		+ cpfcnpj.substring(5, 8) + "/" + cpfcnpj.substring(8, 12) + "-" + cpfcnpj.substring(12, 14); 			 			
	 	}else if(cpfcnpj.length()==11){//modificado para não disparar ArrayIndexOutOfBoundsException
	 		cpfcnpj = cpfcnpj.substring(0, 3) + "." + cpfcnpj.substring(3, 6) + "." 
	 		+ cpfcnpj.substring(6, 9) + "-" + cpfcnpj.substring(9, 11);			
	 	}
	 	return cpfcnpj;
	 	
	 }

 	@Function("restoSemSinal")
	@FunctionParameters({
		@FunctionParameter("a"),
		@FunctionParameter("b")
	})	
	private static int restoSemSinal(long a, int b) {
        return (int) (a >= 0L
                ? a % b // Positivo.
                : (b + (a % b)) % b); // Negativo.
    }

 	@Function("divisaoSemSinal")
	@FunctionParameters({
		@FunctionParameter("a"),
		@FunctionParameter("b")
	})
    private static long divisaoSemSinal(long a, int b) {
        return a >= 0L
                ? a / b // Positivo.
                : (a / b) - (a % b == 0 ? 0 : 1); // Negativo.
    }

 	@Function("getTimestamp")
	@FunctionParameters({
		@FunctionParameter("ano"),
		@FunctionParameter("mes"),
		@FunctionParameter("dia"),
		@FunctionParameter("hora"),
		@FunctionParameter("minuto"),
		@FunctionParameter("segundo")
	})
    private static long getTimestamp(int ano, int mes, int dia, int hora, int minuto, int segundo) {
        // Passo 1.
        long anosDesde1970 = ano - 1970;

        // Passo 2.
        long periodosDe400Anos = divisaoSemSinal(anosDesde1970, 400);
        int anoNoPeriodoDe400Anos = restoSemSinal(anosDesde1970, 400);

        // Passo 3.
        int periodosDe4AnosNos400 = anoNoPeriodoDe400Anos / 4;
        int anoNoPeriodoDe4Anos = anoNoPeriodoDe400Anos % 4;

        // Passo 4.
        int diasNosAnosAnterioresDoPeriodoDe4Anos = 365 * anoNoPeriodoDe4Anos + (anoNoPeriodoDe4Anos == 3 ? 1 : 0);

        // Passo 5.
        long diasNoAno = dia - 1;
        int[] tabelaDeMeses = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
        for (int i = 0; i < mes - 1; i++) {
            diasNoAno += tabelaDeMeses[i];
        }

        // Passo 6.
        long dias = diasNoAno
                + diasNosAnosAnterioresDoPeriodoDe4Anos
                + periodosDe4AnosNos400 * 1461
                + periodosDe400Anos * 146097;

        // Passo 7.
        if (anoNoPeriodoDe4Anos == 2 && mes > 2) dias++;
        if (anoNoPeriodoDe400Anos > 130 || (anoNoPeriodoDe400Anos == 130 && mes > 2)) dias--;
        if (anoNoPeriodoDe400Anos > 230 || (anoNoPeriodoDe400Anos == 230 && mes > 2)) dias--;
        if (anoNoPeriodoDe400Anos > 330 || (anoNoPeriodoDe400Anos == 330 && mes > 2)) dias--;

        // Passo 8.
        return (segundo + 60 * minuto + 60 * 60 * hora + 60 * 60 * 24 * dias)*1000;
    }
 
 	
 	@Function("GetDateLocalInUTC")
	@FunctionParameters({
		@FunctionParameter("ano"),
		@FunctionParameter("mes"),
		@FunctionParameter("dia"),
		@FunctionParameter("hora"),
		@FunctionParameter("minuto"),
		@FunctionParameter("segundo")
	})
 	public static Date GetDateLocalInUTC(int ano, int mes, int dia, int hora, int minuto, int segundo) throws ParseException {
 		  
 		Date data = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(Integer.toString(ano)+"-"+Integer.toString(mes)+"-"+
 		Integer.toString(dia)+" "+Integer.toString(hora)+":"+Integer.toString(minuto)+":"+Integer.toString(segundo));

        ZoneId zone = ZoneId.systemDefault();
        LocalDateTime datetime = Instant.ofEpochMilli(data.getTime()).atZone(zone).toLocalDateTime();
        
 		long mili= getTimestamp(datetime.getYear(),datetime.getMonthValue(),datetime.getDayOfMonth(),datetime.getHour(),datetime.getMinute(),datetime.getSecond());
 		
 		return new Date(mili);

		
	}    
 	
 	@Function("GetDateLocalInUTC")
	@FunctionParameters({
		@FunctionParameter("ano"),
		@FunctionParameter("mes"),
		@FunctionParameter("dia")
	})  	
 	public static Date GetDateLocalInUTC(int ano, int mes, int dia) throws ParseException {
 		return GetDateLocalInUTC(ano, mes, dia, 0, 0, 0);
 	}

 	
 	@Function("GetDateListUTC")
	@FunctionParameters({
		@FunctionParameter("ArrayData")
	})  	
 	public static List<Date> GetDateListUTC(List<Date> ArrayData) throws ParseException {
 		
 		if(ArrayData==null)
 			return null;
 		 		
 		List<Date> newArrayData= new ArrayList<Date>();

 		for(Date arr: ArrayData){
 			newArrayData.add(GetDateUTC(arr));
 		}
 		
 		return newArrayData; 		
 	}
 	
 	
//=====================================Instancias sem argumentos=============================================
 	public static String FirstToUpper() {
 		return FirstToUpper("");
 	}
 	public static String FormataCEP() {
 		return FormataCEP("");
 	}

	public static String FormataTELEFONE() {
		return FormataTELEFONE("");
	
	}

	
 }
